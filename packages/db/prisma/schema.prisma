generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model configurations {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  data String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  libId String    @db.ObjectId
  lib   libraries @relation(fields: [libId], references: [id])
}

enum JavascriptFlavor {
  Vanilla
  Typescript
}

model libraries {
  /// Id of the library
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  /// A unique name following npm package naming convention
  name        String           @unique
  /// Language used to define the library
  flavor      JavascriptFlavor
  /// Object containing package.json file data
  pkgJson     Json
  /// Object containing tsup configuration that will be used in the packaging step *Defaults to default tsup configuration
  buildConfig Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  configs    configurations[]
  components components[]
}

model components {
  /// Id of the library the component belongs 
  libId String    @db.ObjectId
  lib   libraries @relation(fields: [libId], references: [id])

  /// Id of the codeblock associated with the component
  cbId String @db.ObjectId

  /// Id of the component
  id      String       @id @default(auto()) @map("_id") @db.ObjectId
  /// A unique name following npm package naming convention
  name    String       @unique
  /// The path of the file relative to "components" directory
  outPath String
  /// A short description of what the component does
  desc    String
  /// The environments that can support the component
  envs    TargetEnvs[]
  /// Dependencies of the component
  deps    Dependencies
  /// To allow better searching
  tags    String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model codeblocks {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  code String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type TargetEnvs {
  /// Libraries like react, svelte etc.
  library   String
  /// frameworks like nextjs, sveltekit etc.
  framework String?
}

type Dependencies {
  /// Third party dependencies
  ext String[]
  /// Local modules
  lcl String[]
}
