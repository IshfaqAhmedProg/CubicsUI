generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model configurations {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  data String

  created DateTime @default(now())
  updated DateTime @updatedAt

  libId String    @db.ObjectId
  lib   libraries @relation(fields: [libId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Language {
  Javascript
  Typescript
}

model libraries {
  /// Id of the library
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  /// A unique name following npm package naming convention
  name String   @unique
  /// Language used to define the library
  lang Language
  /// A short description of what the library does
  desc String?

  created DateTime @default(now())
  updated DateTime @updatedAt

  configurations configurations[]
  components     components[]
}

model components {
  /// Id of the library the component belongs 
  libId   String       @db.ObjectId
  lib     libraries    @relation(fields: [libId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  /// Id of the component
  id      String       @id @default(auto()) @map("_id") @db.ObjectId
  /// A unique name following npm package naming convention
  name    String       @unique
  /// The path of the file relative to "components" directory
  outPath String
  /// A short description of what the component does
  desc    String
  /// The environments that can support the component
  envs    TargetEnvs[]
  /// Dependencies of the component
  deps    Dependencies
  /// To allow better searching
  tags    String[]

  created DateTime @default(now())
  updated DateTime @updatedAt

  /// codeblocks associated with the component
  codeblock codeblocks?
}

model codeblocks {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  code String

  created DateTime @default(now())
  updated DateTime @updatedAt

  // component id of the component where this codeblock belongs
  component   components @relation(fields: [componentId], references: [id])
  componentId String     @unique @db.ObjectId
}

type TargetEnvs {
  /// Libraries like react, svelte etc.
  lib String
  /// frameworks like nextjs, sveltekit etc.
  fw  String
}

type Dependencies {
  /// Third party dependencies
  ext String[]
  /// Local modules
  lcl String[]
}
