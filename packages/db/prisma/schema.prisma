generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model projects {
  /// Id of the library
  id       String       @id @default(auto()) @map("_id") @db.ObjectId
  /// A unique name following npm package naming convention
  name     String       @unique
  /// Language used to define the library
  lang     Language
  /// Style engine used to style the library
  styleEng StyleEngine
  /// The environments that can support the component
  envs     TargetEnvs[]
  /// A short description of what the library does
  desc     String?
  /// Directories of the project to help user select directory when creating a component
  dirs     String[]

  created DateTime @default(now())
  updated DateTime @updatedAt

  configurations configurations[]
  components     components[]
}

model configurations {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  data String

  created DateTime @default(now())
  updated DateTime @updatedAt

  prId    String   @db.ObjectId
  project projects @relation(fields: [prId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model components {
  /// Id of the library the component belongs 
  prId    String   @db.ObjectId
  project projects @relation(fields: [prId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  /// Id of the component
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  /// A unique name following npm package naming convention
  name    String   @unique
  /// The path of the directory relative to "components" directory
  outDir  String
  /// The output file name
  outFile String
  /// A short description of what the component does
  desc    String

  /// Dependencies of the component
  deps Dependencies
  /// To allow better searching
  tags String[]

  created DateTime @default(now())
  updated DateTime @updatedAt

  /// codeblocks associated with the component 1:1
  codeblocks codeblocks?
}

model codeblocks {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  script String
  styles String?

  created DateTime @default(now())
  updated DateTime @updatedAt

  cmpId     String     @unique @db.ObjectId
  component components @relation(fields: [cmpId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum StyleEngine {
  css
  scss
  tailwindcss
}

type TargetEnvs {
  /// Libraries like react, svelte etc.
  lib String
  /// frameworks like nextjs, sveltekit etc.
  fw  String?
}

type Dependency {
  /// Name of the dependency
  name String
  /// Version of the dependency
  ver  String
  /// Type of the dependency
  type String
}

type Dependencies {
  /// Third party dependencies
  ext Dependency[]
  /// Local modules
  lcl Dependency[]
}

enum Language {
  javascript
  typescript
}
